# app/api/routes.py
from typing import List, Dict, Any, Optional
import time
import os
import logging
from fastapi import APIRouter, HTTPException, UploadFile, File, Form, Depends, Query
from fastapi.responses import JSONResponse
from datetime import datetime

from app.api.models import (
    DocumentUploadResponse,
    QuestionRequest,
    QuestionResponse,
    SearchResult,
    CXStrategyRequest,
    ROIAnalysisRequest,
    JourneyMapRequest,
    DeliverableResponse,
    ConversationInfo,
    ConversationsResponse,
    Project,
    ProjectDocument,
    ProjectCreateRequest,
    ProjectsResponse,
    ProjectDocumentsResponse
)
from app.services.rag_engine import RagEngine
from app.services.memory_manager import MemoryManager
from app.services.project_manager import ProjectManager
from app.api.dependencies import get_rag_engine, get_memory_manager, get_project_manager
from app.api.auth import get_current_user
from app.api.middleware.admin import admin_required

# Configure logger
logger = logging.getLogger("cx_consulting_ai.api.routes")

# Create router
router = APIRouter(prefix="/api")

@router.post("/documents", response_model=DocumentUploadResponse)
async def upload_document(
    file: UploadFile = File(...),
    project_id: Optional[str] = Form(None),
    is_global: bool = Form(False),
    rag_engine: RagEngine = Depends(get_rag_engine),
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Upload a document to the knowledge base."""
    try:
        # Check if either project_id is provided or document is global
        if not project_id and not is_global:
            raise HTTPException(
                status_code=400,
                detail="Either project_id must be provided or document must be marked as global"
            )

        # If project_id is provided, validate it exists
        if project_id:
            project = project_manager.get_project(project_id)
            if not project:
                raise HTTPException(status_code=404, detail=f"Project {project_id} not found")

        # Check file size
        content = await file.read()
        file_size_mb = len(content) / (1024 * 1024)
        max_size_mb = 50  # 50 MB max

        if file_size_mb > max_size_mb:
            raise HTTPException(
                status_code=400,
                detail=f"File too large: {file_size_mb:.2f} MB. Maximum size: {max_size_mb} MB"
            )

        # Process document
        result = await rag_engine.process_document(content, file.filename)

        if result["status"] != "success":
            raise HTTPException(status_code=500, detail=result["error"])

        # If project_id is provided, add document to project
        if project_id:
            project_manager.add_document_to_project(project_id, result["document_id"])

        return DocumentUploadResponse(
            filename=file.filename,
            document_id=result["document_id"],
            project_id=project_id,
            is_global=is_global,
            chunks_created=result["chunks_created"]
        )
    except HTTPException:
        # Re-raise HTTP exceptions as-is
        raise
    except Exception as e:
        # Handle unexpected errors
        logger.error(f"Error uploading document: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error uploading document: {str(e)}")

@router.post("/ask", response_model=QuestionResponse)
async def ask_question(
    request: QuestionRequest,
    rag_engine: RagEngine = Depends(get_rag_engine),
    memory_manager: MemoryManager = Depends(get_memory_manager),
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Ask a question to the CX Consulting AI."""
    try:
        start_time = time.time()

        # Get or create conversation
        conversation_id = request.conversation_id
        project_id = request.project_id

        if not conversation_id:
            # Create new conversation
            conversation_id = memory_manager.create_conversation(project_id)
        elif not memory_manager.get_conversation(conversation_id):
            # If conversation ID is provided but doesn't exist, create it
            conversation_id = memory_manager.create_conversation(project_id)
        elif project_id and memory_manager.get_conversation_project(conversation_id) != project_id:
            # If project ID is provided and different from current association, update it
            memory_manager.set_conversation_project(conversation_id, project_id)

            # Also update the project's conversation list
            if project_manager.get_project(project_id):
                project_manager.add_conversation_to_project(project_id, conversation_id)

        # Get conversation history
        conversation_history = memory_manager.get_formatted_history(conversation_id)

        # Add user message to memory
        memory_manager.add_message(
            conversation_id=conversation_id,
            role="user",
            content=request.query
        )

        # Generate answer
        response = await rag_engine.ask(
            question=request.query,
            conversation_id=conversation_id
        )

        # Add assistant message to memory
        memory_manager.add_message(
            conversation_id=conversation_id,
            role="assistant",
            content=response
        )

        # Prepare sources for response (placeholder for now)
        sources = []

        processing_time = time.time() - start_time

        return QuestionResponse(
            answer=response,
            conversation_id=conversation_id,
            project_id=memory_manager.get_conversation_project(conversation_id),
            sources=sources,
            processing_time=processing_time
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating answer: {str(e)}")

@router.post("/cx-strategy", response_model=DeliverableResponse)
async def generate_cx_strategy(
    request: CXStrategyRequest,
    rag_engine: RagEngine = Depends(get_rag_engine),
    memory_manager: MemoryManager = Depends(get_memory_manager),
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Generate a CX strategy document."""
    try:
        start_time = time.time()

        # Get or create conversation
        conversation_id = request.conversation_id
        project_id = request.project_id

        if not conversation_id:
            conversation_id = memory_manager.create_conversation(project_id)
        elif not memory_manager.get_conversation(conversation_id):
            conversation_id = memory_manager.create_conversation(project_id)
        elif project_id and memory_manager.get_conversation_project(conversation_id) != project_id:
            # Update project association
            memory_manager.set_conversation_project(conversation_id, project_id)

            # Update project's conversation list
            if project_manager.get_project(project_id):
                project_manager.add_conversation_to_project(project_id, conversation_id)

        # Generate strategy
        response, conversation_id, tokens = await rag_engine.create_proposal(
            client_info=f"{request.client_name} ({request.industry})",
            requirements=request.challenges,
            conversation_id=conversation_id
        )

        # Store document if project_id is provided
        document_id = None
        if project_id:
            try:
                # Create a document in the project
                document_id = project_manager.create_document(
                    project_id=project_id,
                    title=f"CX Strategy for {request.client_name}",
                    content=response,
                    document_type="cx_strategy",
                    metadata={
                        "client_name": request.client_name,
                        "industry": request.industry,
                        "challenges": request.challenges,
                        "conversation_id": conversation_id,
                        "tokens": tokens
                    }
                )
            except Exception as doc_error:
                logger.error(f"Error storing document: {str(doc_error)}")
                # Continue without failing the request

        processing_time = time.time() - start_time

        return DeliverableResponse(
            content=response,
            conversation_id=conversation_id,
            project_id=project_id,
            document_id=document_id,
            processing_time=processing_time
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating CX strategy: {str(e)}")

@router.post("/roi-analysis", response_model=DeliverableResponse)
async def generate_roi_analysis(
    request: ROIAnalysisRequest,
    rag_engine: RagEngine = Depends(get_rag_engine),
    memory_manager: MemoryManager = Depends(get_memory_manager),
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
"""Generate an ROI analysis."""
try:
start_time = time.time()

    # Get or create conversation
    conversation_id = request.conversation_id
        project_id = request.project_id

    if not conversation_id:
            conversation_id = memory_manager.create_conversation(project_id)
    elif not memory_manager.get_conversation(conversation_id):
            conversation_id = memory_manager.create_conversation(project_id)
        elif project_id and memory_manager.get_conversation_project(conversation_id) != project_id:
            # Update project association
            memory_manager.set_conversation_project(conversation_id, project_id)

            # Update project's conversation list
            if project_manager.get_project(project_id):
                project_manager.add_conversation_to_project(project_id, conversation_id)

        # Generate ROI analysis
        response, conversation_id, tokens = await rag_engine.create_roi_analysis(
            client_info=f"{request.client_name} ({request.industry})",
            project_details=f"{request.project_description}\n\nCurrent metrics: {request.current_metrics}",
            conversation_id=conversation_id
        )

        # Store document if project_id is provided
        document_id = None
        if project_id:
            try:
                # Create a document in the project
                document_id = project_manager.create_document(
                    project_id=project_id,
                    title=f"ROI Analysis for {request.client_name}",
                    content=response,
                    document_type="roi_analysis",
                    metadata={
        "client_name": request.client_name,
        "industry": request.industry,
        "project_description": request.project_description,
                        "current_metrics": request.current_metrics,
                        "conversation_id": conversation_id,
                        "tokens": tokens
                    }
                )
            except Exception as doc_error:
                logger.error(f"Error storing document: {str(doc_error)}")
                # Continue without failing the request

    processing_time = time.time() - start_time

    return DeliverableResponse(
            content=response,
        conversation_id=conversation_id,
            project_id=project_id,
            document_id=document_id,
        processing_time=processing_time
    )
except Exception as e:
    raise HTTPException(status_code=500, detail=f"Error generating ROI analysis: {str(e)}")

@router.post("/journey-map", response_model=DeliverableResponse)
async def generate_journey_map(
    request: JourneyMapRequest,
    rag_engine: RagEngine = Depends(get_rag_engine),
    memory_manager: MemoryManager = Depends(get_memory_manager),
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
"""Generate a customer journey map."""
try:
start_time = time.time()

    # Get or create conversation
    conversation_id = request.conversation_id
        project_id = request.project_id

    if not conversation_id:
            conversation_id = memory_manager.create_conversation(project_id)
    elif not memory_manager.get_conversation(conversation_id):
            conversation_id = memory_manager.create_conversation(project_id)
        elif project_id and memory_manager.get_conversation_project(conversation_id) != project_id:
            # Update project association
            memory_manager.set_conversation_project(conversation_id, project_id)

            # Update project's conversation list
            if project_manager.get_project(project_id):
                project_manager.add_conversation_to_project(project_id, conversation_id)

        # Generate journey map
        response, conversation_id, tokens = await rag_engine.create_journey_map(
            persona=request.persona,
            scenario=request.scenario,
            conversation_id=conversation_id
        )

        # Store document if project_id is provided
        document_id = None
        if project_id:
            try:
                # Create a document in the project
                document_id = project_manager.create_document(
                    project_id=project_id,
                    title=f"Journey Map for {request.client_name} - {request.persona}",
                    content=response,
                    document_type="journey_map",
                    metadata={
        "client_name": request.client_name,
        "industry": request.industry,
        "persona": request.persona,
                        "scenario": request.scenario,
                        "conversation_id": conversation_id,
                        "tokens": tokens
                    }
                )
            except Exception as doc_error:
                logger.error(f"Error storing document: {str(doc_error)}")
                # Continue without failing the request

    processing_time = time.time() - start_time

    return DeliverableResponse(
            content=response,
        conversation_id=conversation_id,
            project_id=project_id,
            document_id=document_id,
        processing_time=processing_time
    )
except Exception as e:
    raise HTTPException(status_code=500, detail=f"Error generating journey map: {str(e)}")

@router.get("/conversations", response_model=ConversationsResponse)
async def get_conversations(
    limit: int = Query(50, ge=1, le=100),
    offset: int = Query(0, ge=0),
    project_id: Optional[str] = None,
    memory_manager: MemoryManager = Depends(get_memory_manager),
    current_user: dict = Depends(get_current_user)
):
    """Get all conversations."""
    try:
        # If project_id is provided, get conversations for that project
        if project_id:
            conversation_ids = memory_manager.get_project_conversations(project_id)
            conversation_list = []

            for conv_id in conversation_ids:
                conv = memory_manager.get_conversation(conv_id)
                if conv:
                    # Calculate timestamps
                    created_at = datetime.fromtimestamp(conv[0]["timestamp"]).isoformat() if conv else datetime.now().isoformat()
                    updated_at = datetime.fromtimestamp(conv[-1]["timestamp"]).isoformat() if conv else datetime.now().isoformat()

                    conversation_list.append(ConversationInfo(
                        id=conv_id,
                        created_at=created_at,
                        updated_at=updated_at,
                        message_count=len(conv),
                        project_id=project_id
                    ))

            # Apply pagination
            paginated = conversation_list[offset:offset+limit]
            return ConversationsResponse(
                conversations=paginated,
                count=len(conversation_list)
            )
        else:
            # For now, just return an empty list - this would need to be updated
            # to get all conversations in a real implementation
    return ConversationsResponse(
                conversations=[],
                count=0
    )
except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error getting conversations: {str(e)}")

@router.delete("/conversations/{conversation_id}")
async def delete_conversation(
    conversation_id: str,
    memory_manager: MemoryManager = Depends(get_memory_manager),
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
"""Delete a conversation."""
try:
        # Check if conversation is associated with a project
        project_id = memory_manager.get_conversation_project(conversation_id)
        if project_id:
            # Remove from project's conversation list
            project = project_manager.get_project(project_id)
            if project and conversation_id in project.get("conversation_ids", []):
                project_manager.remove_conversation_from_project(project_id, conversation_id)

        # Delete conversation
success = memory_manager.delete_conversation(conversation_id)
    if success:
            return {"status": "success", "message": f"Conversation {conversation_id} deleted"}
    else:
            raise HTTPException(status_code=404, detail=f"Conversation {conversation_id} not found")
    except HTTPException:
        raise
except Exception as e:
    raise HTTPException(status_code=500, detail=f"Error deleting conversation: {str(e)}")

@router.get("/health")
async def health_check():
"""Health check endpoint."""
return {
"status": "healthy",
"model": os.getenv("MODEL_ID", "google/gemma-7b-it"),
"version": "1.0.0"
}

# PROJECTS API ENDPOINTS

@router.post("/projects", response_model=Project)
async def create_project(
    project_request: ProjectCreateRequest,
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Create a new project."""
    try:
        project_id = project_manager.create_project(
            name=project_request.name,
            client_name=project_request.client_name,
            industry=project_request.industry,
            description=project_request.description,
            metadata=project_request.metadata
        )

        # Return the created project
        project = project_manager.get_project(project_id)
        return project
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error creating project: {str(e)}")

@router.get("/projects", response_model=ProjectsResponse)
async def list_projects(
    limit: int = Query(50, ge=1, le=100),
    offset: int = Query(0, ge=0),
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """List all projects."""
    try:
        projects, count = project_manager.list_projects(limit=limit, offset=offset)
        return ProjectsResponse(projects=projects, count=count)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error listing projects: {str(e)}")

@router.get("/projects/{project_id}", response_model=Project)
async def get_project(
    project_id: str,
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Get a project by ID."""
    try:
        project = project_manager.get_project(project_id)
        if not project:
            raise HTTPException(status_code=404, detail=f"Project {project_id} not found")
        return project
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error getting project: {str(e)}")

@router.put("/projects/{project_id}", response_model=Project)
async def update_project(
    project_id: str,
    updates: dict,
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Update a project."""
    try:
        success = project_manager.update_project(project_id, updates)
        if not success:
            raise HTTPException(status_code=404, detail=f"Project {project_id} not found")

        # Return the updated project
        project = project_manager.get_project(project_id)
        return project
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating project: {str(e)}")

@router.delete("/projects/{project_id}")
@admin_required
async def delete_project(
    project_id: str,
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Delete a project."""
    try:
        success = project_manager.delete_project(project_id)
        if not success:
            raise HTTPException(status_code=404, detail=f"Project {project_id} not found")

        return {"status": "success", "message": f"Project {project_id} deleted"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting project: {str(e)}")

# PROJECT DOCUMENTS API ENDPOINTS

@router.get("/projects/{project_id}/documents", response_model=ProjectDocumentsResponse)
async def get_project_documents(
    project_id: str,
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Get all documents for a project."""
    try:
        # Check if project exists
        project = project_manager.get_project(project_id)
        if not project:
            raise HTTPException(status_code=404, detail=f"Project {project_id} not found")

        documents = project_manager.get_project_documents(project_id)
        return ProjectDocumentsResponse(documents=documents, count=len(documents))
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error getting project documents: {str(e)}")

@router.get("/documents/{document_id}", response_model=ProjectDocument)
async def get_document(
    document_id: str,
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Get a document by ID."""
    try:
        document = project_manager.get_document(document_id)
        if not document:
            raise HTTPException(status_code=404, detail=f"Document {document_id} not found")
        return document
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error getting document: {str(e)}")

@router.put("/documents/{document_id}", response_model=ProjectDocument)
async def update_document(
    document_id: str,
    updates: dict,
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Update a document."""
    try:
        success = project_manager.update_document(document_id, updates)
        if not success:
            raise HTTPException(status_code=404, detail=f"Document {document_id} not found")

        # Return the updated document
        document = project_manager.get_document(document_id)
        return document
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating document: {str(e)}")

@router.delete("/documents/{document_id}")
@admin_required
async def delete_document(
    document_id: str,
    project_manager: ProjectManager = Depends(get_project_manager),
    current_user: dict = Depends(get_current_user)
):
    """Delete a document."""
    try:
        success = project_manager.delete_document(document_id)
        if not success:
            raise HTTPException(status_code=404, detail=f"Document {document_id} not found")

        return {"status": "success", "message": f"Document {document_id} deleted"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting document: {str(e)}")

# PROJECT CONVERSATIONS API ENDPOINTS

@router.get("/projects/{project_id}/conversations", response_model=ConversationsResponse)
async def get_project_conversations(
    project_id: str,
    project_manager: ProjectManager = Depends(get_project_manager),
    memory_manager: MemoryManager = Depends(get_memory_manager),
    current_user: dict = Depends(get_current_user)
):
    """Get all conversations for a project."""
    try:
        # Check if project exists
        project = project_manager.get_project(project_id)
        if not project:
            raise HTTPException(status_code=404, detail=f"Project {project_id} not found")

        # Get conversation IDs
        conversation_ids = memory_manager.get_project_conversations(project_id)

        # Get conversation details
        conversations = []
        for conv_id in conversation_ids:
            conv = memory_manager.get_conversation(conv_id)
            if conv:
                # Create a conversation info object
                conversations.append(ConversationInfo(
                    id=conv_id,
                    created_at=datetime.fromtimestamp(conv[0]["timestamp"]).isoformat() if conv else datetime.now().isoformat(),
                    updated_at=datetime.fromtimestamp(conv[-1]["timestamp"]).isoformat() if conv else datetime.now().isoformat(),
                    message_count=len(conv),
                    project_id=project_id
                ))

        return ConversationsResponse(conversations=conversations, count=len(conversations))
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error getting project conversations: {str(e)}")

@router.post("/projects/{project_id}/associate-conversation/{conversation_id}")
async def associate_conversation_with_project(
    project_id: str,
    conversation_id: str,
    project_manager: ProjectManager = Depends(get_project_manager),
    memory_manager: MemoryManager = Depends(get_memory_manager),
    current_user: dict = Depends(get_current_user)
):
    """Associate a conversation with a project."""
    try:
        # Check if project exists
        project = project_manager.get_project(project_id)
        if not project:
            raise HTTPException(status_code=404, detail=f"Project {project_id} not found")

        # Check if conversation exists
        conversation = memory_manager.get_conversation(conversation_id)
        if not conversation:
            raise HTTPException(status_code=404, detail=f"Conversation {conversation_id} not found")

        # Associate conversation with project
        memory_manager.set_conversation_project(conversation_id, project_id)
        project_manager.add_conversation_to_project(project_id, conversation_id)

        return {"status": "success", "message": f"Conversation {conversation_id} associated with project {project_id}"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error associating conversation with project: {str(e)}")

# ADMIN ENDPOINTS

@router.get("/admin/users")
@admin_required
async def list_users(
    limit: int = Query(50, ge=1, le=100),
    offset: int = Query(0, ge=0),
    current_user: dict = Depends(get_current_user)
):
    """List all users (admin only)."""
    try:
        from app.services.auth_service import AuthService
        auth_service = AuthService()

        users, count = auth_service.list_users(limit=limit, offset=offset)
        return {"users": users, "count": count}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error listing users: {str(e)}")

@router.put("/admin/users/{user_id}")
@admin_required
async def admin_update_user(
    user_id: str,
    updates: dict,
    current_user: dict = Depends(get_current_user)
):
    """Update a user (admin only)."""
    try:
        from app.services.auth_service import AuthService
        auth_service = AuthService()

        # Don't allow changing password through this endpoint
        if "password" in updates:
            del updates["password"]

        user = auth_service.update_user(user_id, updates)
        if not user:
            raise HTTPException(status_code=404, detail=f"User {user_id} not found")

        return user
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating user: {str(e)}")

@router.delete("/admin/users/{user_id}")
@admin_required
async def admin_delete_user(
    user_id: str,
    current_user: dict = Depends(get_current_user)
):
    """Delete a user (admin only)."""
    try:
        from app.services.auth_service import AuthService
        auth_service = AuthService()

        # Don't allow deleting yourself
        if user_id == current_user["id"]:
            raise HTTPException(status_code=400, detail="Cannot delete your own account")

        success = auth_service.delete_user(user_id)
        if not success:
            raise HTTPException(status_code=404, detail=f"User {user_id} not found")

        return {"status": "success", "message": f"User {user_id} deleted"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting user: {str(e)}")

@router.post("/admin/users")
@admin_required
async def admin_create_user(
    user_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """Create a new user (admin only)."""
    try:
        from app.services.auth_service import AuthService
        auth_service = AuthService()

        # Check required fields
        required_fields = ["username", "email", "password"]
        for field in required_fields:
            if field not in user_data:
                raise HTTPException(status_code=400, detail=f"Missing required field: {field}")

        # Create user
        user = auth_service.create_user(
            username=user_data["username"],
            email=user_data["email"],
            password=user_data["password"],
            full_name=user_data.get("full_name"),
            company=user_data.get("company"),
            is_admin=user_data.get("is_admin", False)
        )

        if not user:
            raise HTTPException(
                status_code=400,
                detail="Could not create user. Username or email may already exist."
            )

        return user
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error creating user: {str(e)}")
